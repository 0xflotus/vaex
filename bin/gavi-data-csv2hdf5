#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import h5py
from optparse import OptionParser
import os
import sys



usage = """
Convert comma seperate value format to hdf5 format:

Example:

gavi-data-csv2hdf5 $GAVI_DATA/rave_internal_300808.v1g.TJK.uniform.final.post.csv -o rave.hdf5

"""
parser = OptionParser(usage=usage)

#parser.add_option("-n", "--name",
 #                 help="dataset name [default=%default]", default="data", type=str)
parser.add_option("-o", "--output",
                 help="dataset output filename [by default the suffix of input filename will be replaced by hdf5]", default=None, type=str)
(options, args) = parser.parse_args()

#h5file = h5py.File(args[0], "r", driver="core")
if len(args) != 1:
	print >>sys.stderr, "program takes filename as argument"
	sys.exit(1)
	
csvfilename = args[0]
if options.output is None:
	basename = os.path.splitext(os.path.basename(csvfilename))[0]
	if os.path.splitext(basename)[1] == ".csv":
		basename  = os.path.splitext(basename)[0]
		
	hdf5filename = basename + ".hdf5"
else:
	hdf5filename = options.output
	
print >>sys.stderr, "opening:", csvfilename


data = np.genfromtxt(csvfilename, delimiter=',', dtype=None, names=True)
print "columns:", data.dtype.names
print >>sys.stderr, "number of rows: %d" % len(data)
#print np.mean(data["Vr"])
                     
print >>sys.stderr, "writing to:", hdf5filename
h5file = h5py.File(hdf5filename, "w", driver="core")
datagroup = h5file.create_group("data")
for name in data.dtype.names:
	#if name not in "OBJECT_ID":
	if data[name].dtype.kind == "f":
		datagroup.create_dataset(name, data=data[name])
		