#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import time
import os
import wx
print wx.__version__
import matplotlib
matplotlib.use('WXAgg')
import numpy as np
from mayavi import mlab


from traits.api import HasTraits, Range, Instance, \
                    on_trait_change
from traitsui.api import View, Item, HGroup
from tvtk.pyface.scene_editor import SceneEditor
from mayavi.tools.mlab_scene_model import \
                    MlabSceneModel
from mayavi.core.ui.mayavi_scene import MayaviScene

from numpy import *




from numpy import ogrid, sin

from traits.api import HasTraits, Instance
from traitsui.api import View, Item

from mayavi.sources.api import ArraySource
from mayavi.modules.api import IsoSurface, Outline

from mayavi.core.ui.api import SceneEditor, MlabSceneModel

class MayaviView(HasTraits):

	scene = Instance(MlabSceneModel, ())

	# The layout of the panel created by Traits
	view = View(Item('scene', editor=SceneEditor(), resizable=True,
					show_label=False),
					resizable=True)

	def __init__(self):
		HasTraits.__init__(self)
		# Create some data, and plot it using the embedded scene's engine
		x, y, z = ogrid[-10:10:100j, -10:10:100j, -10:10:100j]
		scalars = sin(x*y*z)/(x*y*z)
		#src = ArraySource(scalar_data=scalars)
		#self.scene.engine.add_source(src)
		#src.add_module(IsoSurface())
		
	def plot(self, h5density):
		print h5density.name
		#x, y, z = ogrid[-10:10:100j, -10:10:100j, -10:10:100j]
		#scalars = sin(x*y*z)/(x*y*z)**2
		data = np.array(h5density["density"])
		print data
		print data.shape
		src = ArraySource(scalar_data=data)
		self.scene.engine.add_source(src)
		iso = IsoSurface()
		#iso.contour.contours = list(np.linspace(data.min(), data.max(), 3, endpoint=False))
		mu = np.mean(data)
		std = np.std(data)
		src.add_module(iso)
		iso.contour.contours = [200]
		iso.actor.property.opacity = 0.5
		iso.actor.property.color = 1.,0.,0.
		iso.module_manager.scalar_lut_manager.show_scalar_bar = True
		iso.actor.mapper.scalar_mode = 'use_field_data'
		
		iso2 = IsoSurface()
		src.add_module(iso2)
		
		iso2.contour.contours = [2]
		iso2.actor.property.color = 0.,1.,0.
		iso2.actor.mapper.scalar_mode = 'use_field_data'
		iso2.actor.property.opacity = 0.3

		iso3 = IsoSurface()
		src.add_module(iso3)
		
		iso3.contour.contours = [0.7]
		iso3.actor.property.color = 0.,0.,1.
		iso3.actor.mapper.scalar_mode = 'use_field_data'
		iso3.actor.property.opacity = 0.3

		
		o = Outline()
		src.add_module(o)
		o.actor.property.color = 1, 0, 0 # red color.
		#src.add_module(IsoSurface())
      

#from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
#from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

import  wx.gizmos   as  gizmos


from optparse import OptionParser
import subspacefind
import h5py
import numpy as np
import itertools
parser = OptionParser()

parser.add_option("-n", "--name",
                  help="dataset name [default=%default]", default="qualities", type=str)
parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
parser.add_option("-l", "--link", action="store_true", default=False, help="link to original datatsets")
parser.add_option("-o", "--output",
                  help="output hdf5 file, default the same as input", default=None, type=str)
(options, args) = parser.parse_args()

h5filename = os.path.abspath(args[0])
print "opening:", h5filename
h5file = h5py.File(h5filename) #, driver="core")
if options.name not in h5file:
	print "doesn't exist", options.name
	sys.exit(1)
h5qualities = h5file[options.name]
if options.output is not None:
	h5file_output = h5py.File(options.output)
else:
	h5file_output = h5file

class MainFrame(wx.Frame):
	def __init__(self, parent, title):
		self.dirname = os.path.abspath(".")
		wx.Frame.__init__(self, parent, title=title, size=(1200,800), pos=(-1,-1))
		self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE)
		self.CreateStatusBar()
		
		filemenu= wx.Menu()
		menuOpen = filemenu.Append(wx.ID_OPEN, "&Open"," Open a file to edit")
		menuAbout= filemenu.Append(wx.ID_ABOUT, "&About"," Information about this program")
		menuExit = filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program")
		menuBar = wx.MenuBar()
		menuBar.Append(filemenu,"&File") # Adding the "filemenu" to the MenuBar
		self.SetMenuBar(menuBar)  # Adding the MenuBar to the Frame content.
		
		self.Bind(wx.EVT_MENU, self.OnOpen, menuOpen)
		self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
		self.Bind(wx.EVT_MENU, self.OnAbout, menuAbout)
		
		
		
		
		
		self.splitter = wx.SplitterWindow(self)
		
		self.tree = gizmos.TreeListCtrl(self.splitter, -1, style =
										wx.TR_DEFAULT_STYLE
										#| wx.TR_HAS_BUTTONS
										| wx.TR_TWIST_BUTTONS
										| wx.TR_ROW_LINES
										| wx.TR_COLUMN_LINES
										#| wx.TR_NO_LINES 
										| wx.TR_FULL_ROW_HIGHLIGHT
										)
										
		style = wx.BORDER_SUNKEN
		self.info = wx.Panel(self.splitter, style=style)
		wx.StaticText(self.info, -1, "Double click an item on the left...")
		self.splitter.SplitVertically(self.tree, self.info, 300)
		self.splitter.SetSashGravity(0.3)
		self.info.SetMinSize((600, 200))
		
		self.figure = Figure()
		self.axes = self.figure.add_subplot(111)
		self.canvas = FigureCanvas(self.info, -1, self.figure)
		self.sizerInfo = wx.BoxSizer(wx.HORIZONTAL)
		
		self.mayavi_view = MayaviView()
		self.control = self.mayavi_view.edit_traits(
						parent=self.info,
						kind='subpanel').control


		self.sizerInfo.Add(self.control, 1, wx.LEFT | wx.TOP | wx.GROW)
		self.sizerInfo.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
		self.info.SetSizer(self.sizerInfo)
		
		
		t = np.arange(0.0, 3.0, 0.01)
		s = np.sin(2 * np.pi * t)
		self.axes.plot(t, s)

		
                                        
		isz = (16,16)
		il = wx.ImageList(isz[0], isz[1])
		fldridx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
		fldropenidx = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
		fileidx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))                                        
		
		
		self.tree.SetImageList(il)
		self.il = il
		
		self.tree.AddColumn("Name")
		self.tree.AddColumn("Avg Quality")
		self.tree.AddColumn("Quality")
		self.tree.SetMainColumn(0) # the one with the tree in it...
		self.tree.SetColumnWidth(0, 175)
		
		
		self.treeItemRoot = self.tree.AddRoot(os.path.basename(h5filename))
		id = 1
		self.idToh5 = {}
		for dim in range(1,4):
			h5dim = h5qualities[str(dim) + "d"]
			#child = 
			self.treeItemDimRoot = self.tree.AppendItem(self.treeItemRoot, str(dim) + "d")
			self.tree.SetItemPyData(self.treeItemDimRoot, h5dim)
			for group_name in h5dim:
				h5group = h5dim[group_name]
				self.treeItemDim = self.tree.AppendItem(self.treeItemDimRoot, group_name)
				#self.idToh5[self.treeItemDim.GetId()] = h5group
				self.tree.SetItemPyData(self.treeItemDim, h5group)
				quality = h5group.attrs["quality"]
				self.tree.SetItemText(self.treeItemDim , str(quality), 1)
			self.tree.Expand(self.treeItemDimRoot)
		self.tree.Expand(self.treeItemRoot)
		#self.tree.SetItemText(self.root, "col 2 root", 2)
		#self.tree.SetItemImage(self.root, fldridx, which = wx.TreeItemIcon_Normal)
		#self.tree.SetItemImage(self.root, fldropenidx, which = wx.TreeItemIcon_Expanded)
		self.tree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnTreeActivate)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnTreeActivate)
		
		self.sizer = wx.BoxSizer(wx.HORIZONTAL)
		if 0:
			
			self.sizer2 = wx.BoxSizer(wx.VERTICAL)
			self.buttons = []
			for i in range(0, 6):
				if i == 2:
					self.buttons.append(wx.Button(self, -1, "Button twoooooo"))
				else:
					self.buttons.append(wx.Button(self, -1, "Button &"+str(i)))
				#self.sizer2.Add(self.buttons[i], 1, wx.EXPAND)
				self.sizer2.Add(self.buttons[i])#, 0, wx.ALIGN_LEFT)

			# Use some sizers to see layout options
			self.sizer = wx.BoxSizer(wx.HORIZONTAL)
			self.sizer.Add(self.sizer2, 0, wx.EXPAND)
			self.sizer.Add(self.control, 1, wx.EXPAND)

		self.tree.SetMinSize((400, 800))
		
		
		self.sizer.Add(self.splitter, 1, wx.EXPAND)
		self.SetSizer(self.sizer)
		self.SetAutoLayout(1)
		#self.sizer.Fit(self)
		
	def OnTreeActivate(self, event):
		#print dir(event.GetItem())
		#print 'OnActivate: %s' % self.tree.GetItemText(event.GetItem()), event.GetItem().id
		h5group = self.tree.GetPyData(event.GetItem())
		#import pdb
		#pdb.set_trace()
		h5dim = h5group = self.tree.GetPyData(event.GetItem())
		if h5dim != None:
			if h5dim.parent == h5file["/qualities"]:
				print h5dim.name
				if h5dim.name == "/qualities/1d":
					names = []
					self.axes.cla()
					for group_name in h5dim:
						h5group = h5dim[group_name]
						h5density = h5group["density"]
						self.plotDensity(h5density, clear=False)
						names.append(h5density.attrs["column1_name"])
						
					print names
					self.axes.set_xlabel(", ".join(names))
					self.canvas.draw()
					
			elif "density" in h5group.keys():
				h5density = h5group["density"]
				self.plotDensity(h5density)
			
			
	def plotDensity(self, h5density, clear=True):
		print h5density["density"]
		data = np.array(h5density["density"])
		rank = np.rank(data)
		if clear:
			self.axes.cla()
		if rank == 1:
			minimum = h5density.attrs["min"]
			maximum = h5density.attrs["max"]
			N = len(data)
			dx = (maximum - minimum)/N
			x = np.linspace(minimum, maximum, N, endpoint=False) + dx/2
			self.axes.set_aspect('auto')
			self.axes.plot(x, data)
			column_name = h5density.attrs["column1_name"]
			self.axes.set_xlabel(column_name)
			self.axes.set_ylabel("density")

		if rank == 2:
			minima = h5density.attrs["min"]
			maxima = h5density.attrs["max"]
			data = np.array(h5density["density"])
			#I = data
			I = np.log10(data)
			I -= I.max()
			I[I<-4] = -4
			print minima
			self.axes.imshow(I, origin="upper", extent=[minima[0], maxima[0], minima[1], maxima[1]])
			self.axes.set_aspect('auto')
			column_names = [h5density.attrs["column1_name"], h5density.attrs["column2_name"]]
			self.axes.set_xlabel(column_names[0])
			self.axes.set_ylabel(column_names[1])
		if rank == 3:
			self.mayavi_view.plot(h5density)
		self.canvas.draw()
			
		

	def OnAbout(self, e):
			# Create a message dialog box
			dlg = wx.MessageDialog(self, " A sample editor \n in wxPython", "About Sample Editor", wx.OK)
			dlg.ShowModal() # Shows it
			dlg.Destroy() # finally destroy it when finished.		

	def OnExit(self,e):
		self.Close(True)  # Close the frame.

	def OnOpen(self,e):
		""" Open a file"""
		dlg = wx.FileDialog(self, "Choose a file", self.dirname, "", "*.*", wx.OPEN)
		if dlg.ShowModal() == wx.ID_OK:
			self.filename = dlg.GetFilename()
			self.dirname = dlg.GetDirectory()
			f = open(os.path.join(self.dirname, self.filename), 'r')
			self.control.SetValue(f.read())
			f.close()
		dlg.Destroy()
        
app = wx.App(False)  # Create a new app, don't redirect stdout/stderr to a window.
frame = MainFrame(None, "GAIA subspace explorer") # A Frame is a top-level window.
frame.Show(True)     # Show the frame.
app.MainLoop()