#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

from optparse import OptionParser
import h5py
import matplotlib.pyplot as plt
import numpy as np
import scipy.ndimage.filters

parser = OptionParser()

parser.add_option("-n", "--name",
                 help="dataset name [default=%default]", default="densities", type=str)
#parser.add_option("-o", "--output",
#                  help="output hdf5 file, default the same as input", default=None, type=str)
parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
parser.add_option("--debug", action="store_true", default=False, help="debug")
(options, args) = parser.parse_args()

#h5file = h5py.File(args[0], "r", driver="core")
h5filename = os.path.abspath(args[0])
print "opening:", h5filename
h5file = h5py.File(h5filename, "r") #, driver="core")

if options.name not in h5file.keys():
	print options.name, "not found in file", h5filename
	sys.exit(1)


h5densities = h5file[options.name]

dim = 3
name = str(dim) + "d"
print "dim", dim, name
#print h5densities.keys()
#print h5densities
if name not in h5densities:
    print "group", name, "not found"
    sys.exit(1)
h5densities_dim = h5densities[name]


scales = 10**np.arange(-2, 1.1, 0.1)

names = h5densities_dim.keys()

if options.all:
	names = map(str, names)
elif (len(args) == 1) and not options.all:
	print "add density names after filename or use -a/--all for all"
	print "possible column names: [%s]:" % ",".join([str(k) for k in names])
	sys.exit(1)
else:
	names = map(str, args[1:])



rankings = []

for h5density_name in names:
	h5density = h5densities_dim[h5density_name]
	density_original = np.array(h5density["density"])
	deltax = [h5density.attrs["max"][d] - h5density.attrs["min"][d] for d in range(dim)]
	dx = np.array([deltax[d]/density_original.shape[d] for d in range(dim)])
	#print np.sum(density) * np.sum(dx),  np.sum(density_shuffled) * np.sum(dx)
	density_original /= np.sum(density_original) * np.sum(dx)
	#print np.sum(density) * np.sum(dx),  np.sum(density_shuffled) * np.sum(dx)
	
	y = []
	for scale in scales:
		density_smooth = scipy.ndimage.filters.gaussian_filter(density_original, scale, mode="constant", cval=0.)
		density_smooth /= np.sum(density_smooth) * np.sum(dx)
		mask = (density_smooth > 0) & (density_original>0)
		D_kl = np.sum(density_smooth[mask] * np.log(density_smooth[mask]/density_original[mask])) * np.sum(dx)
		D_kl = np.sum(density_original[mask] * np.log(density_original[mask]/density_smooth[mask])) * np.sum(dx)
		y.append(D_kl)
	
	if options.debug:
		
		minima = h5density.attrs["min"]
		maxima = h5density.attrs["max"]
		data = np.array(h5density["density"])
		#I = data
		I = np.log10(density_smooth)
		I -= I.max()
		I[I<-4] = -4
		
		column_names = [h5density.attrs["column1_name"], h5density.attrs["column2_name"]]
		
		plt.figure(1, figsize=(8,12))
		#fig, axes = plt.subplots(nrows=3, ncols=1)
		plt.subplot(311)
		plt.tight_layout()

		plt.imshow(I, origin="upper", extent=[minima[0], maxima[0], minima[1], maxima[1]], aspect='auto')
		plt.xlabel(column_names[0])
		plt.ylabel(column_names[1])
		name = "density2d"
		#filename = name +"-2d-" +h5density_name + "-smooth"
		#print "saving to: ", filename +".png"
		#plt.axes().set_aspect('auto')
		#plt.savefig(filename +".png", bbox_inches='tight')
		#plt.cla()
		plt.subplot(312)
		
		I = np.log10(density_original)
		I -= I.max()
		I[I<-4] = -4
		plt.imshow(I, origin="upper", extent=[minima[0], maxima[0], minima[1], maxima[1]], aspect='auto')
		plt.xlabel(column_names[0])
		plt.ylabel(column_names[1])
		#filename = name +"-2d-" +h5density_name + "-org"
		#print "saving to: ", filename +".png"
		#plt.axes().set_aspect('auto')
		#plt.savefig(filename +".png", bbox_inches='tight')

		if 1:
			plt.subplot(313)
			I = density_original * 0
			I[mask] = density_original[mask] * np.log(density_original[mask]/density_smooth[mask])
			plt.imshow(I, origin="upper", extent=[minima[0], maxima[0], minima[1], maxima[1]], aspect='auto')
			plt.xlabel(column_names[0])
			plt.ylabel(column_names[1])
			#plt.axes().set_aspect('auto')
		filename = name + "-" +h5density_name 
		print "saving to: ", filename +".png"
		#plt.show()
		plt.savefig(filename +".png") #, bbox_inches='tight')
		plt.cla()
		plt.clf()
		
		
	else:
		plt.plot(np.log10(scales), y) #np.log10(y)) #, 'o')
	y = np.array(y)
	rankings.append(y[-1])


indices = np.argsort(rankings)
print indices
for index in indices:
	print names[index]
if not options.debug:
	plt.show()
	



#import pdb
