#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

from optparse import OptionParser
import h5py
import matplotlib.pyplot as plt
import numpy as np

parser = OptionParser()

parser.add_option("-n", "--name",
                  help="dataset name [default=%default]", default="densities", type=str)
parser.add_option("-o", "--output",
                  help="output hdf5 file, default the same as input", default=None, type=str)
parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
(options, args) = parser.parse_args()

#h5file = h5py.File(args[0], "r", driver="core")
h5filename = os.path.abspath(args[0])
print "opening:", h5filename
h5file = h5py.File(h5filename) #, driver="core")

if options.name not in h5file.keys():
	print options.name, "not found in file", h5filename
	sys.exit(1)

h5densities = h5file[options.name]

if len(args) == 1:
	print "following densities available"
	for dim in ["1d", "2d", "3d"]:
		if dim in h5densities.keys():
			print dim, ":\t", "\n\t".join(h5densities[dim].keys())

basename = os.path.splitext(os.path.basename(h5filename))[0]
	
if options.all:
	for dim in [1,2,3]:
		name = str(dim) + "d"
		print "dim", dim, name
		#print h5densities.keys()
		#print h5densities
		if name not in h5densities:
			print "group", name, "not found, skipping"
			continue
		h5densities_dim = h5densities[name]
		#import pdb
		#pdb.set_trace()
		#print h5densities_dim, h5densities_dim.keys()
		for h5density_name in h5densities_dim.keys():
			h5density = h5densities_dim[h5density_name]
			if dim == 1:
				#print `h5density`
				#I = image
				#I = np.log10(image)
				#I -= I.max()
				#I[I<-4] = -4
				minimum = h5density.attrs["min"]
				maximum = h5density.attrs["max"]
				data = np.array(h5density["density"])
				#print data
				N = len(data)
				dx = (maximum - minimum)/N
				x = np.linspace(minimum, maximum, N, endpoint=False) + dx/2
				#print x, data
				plt.plot(x, data) #, 'o')
				column_name = h5density.attrs["column1_name"]
				plt.xlabel(column_name)
				plt.ylabel("density")
				#plt.title("Quality: %.2f" % quality[i][j])
				filename = basename +"-1d-" +column_name
				print "saving to: ", filename +".png"
				plt.savefig(filename +".png", bbox_inches='tight')
				print "saving to: ", filename +".eps"
				plt.savefig(filename +".eps", bbox_inches='tight')
				plt.cla()
			if dim == 2:
				minima = h5density.attrs["min"]
				maxima = h5density.attrs["max"]
				data = np.array(h5density["density"])
				#I = data
				I = np.log10(data)
				I -= I.max()
				I[I<-4] = -4
				#print minima
				plt.imshow(I, origin="upper", extent=[minima[0], maxima[0], minima[1], maxima[1]])
				column_names = [h5density.attrs["column1_name"], h5density.attrs["column2_name"]]
				plt.xlabel(column_names[0])
				plt.ylabel(column_names[1])
				filename = basename +"-2d-" +h5density_name
				print "saving to: ", filename +".png"
				plt.axes().set_aspect('auto')
				
				plt.savefig(filename +".png", bbox_inches='tight')
				print "saving to: ", filename +".eps"
				plt.savefig(filename +".eps", bbox_inches='tight')
				plt.cla()
