#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

from optparse import OptionParser
import h5py
import numpy as np
import subspacefind

parser = OptionParser()

parser.add_option("-n", "--name",
                  help="dataset name [default=%default]", default="densities", type=str)
parser.add_option("-o", "--output",
                  help="output hdf5 file, default the same as input", default=None, type=str)
parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
(options, args) = parser.parse_args()

#h5file = h5py.File(args[0], "r", driver="core")
h5filename = os.path.abspath(args[0])
print "opening:", h5filename
h5file = h5py.File(h5filename) #, driver="core")

if options.output is not None:
	h5file_output = h5py.File(options.output)
else:
	h5file_output = h5file


if options.name not in h5file.keys():
	print options.name, "not found in file", h5filename
	sys.exit(1)

h5densities = h5file[options.name]
h5qualities = h5file_output.require_group("qualities")

if len(args) == 1:
	print "following densities available"
	for dim in ["1d", "2d", "3d"]:
		if dim in h5densities.keys():
			print dim, ":\t", "\n\t".join(h5densities[dim].keys())
			

basename = os.path.splitext(os.path.basename(h5filename))[0]
	
if options.all:
	for dim in [2,3]:
		name = str(dim) + "d"
		print "dim", name
		h5qualities_dim = h5qualities.require_group(name)
		#print h5densities.keys()
		#print h5densities
		if name not in h5densities:
			print "group", name, "not found, skipping"
			continue
		h5densities_dim = h5densities[name]
		for h5density_name in h5densities_dim.keys():
			h5density = h5densities_dim[h5density_name]
			h5quality = h5qualities_dim.require_group(h5density_name)
			dynamics, x, y = [], [], []
			if dim in [2,3]:
				print "\t2d", h5density_name, "D_kl\t",
				density = np.array(h5density["density"])
				density_shuffled = np.array(h5density["density-shuffled"])
				import pdb
				#pdb.set_trace()
				mask = (density_shuffled > 0) & (density>0)
				deltax = [h5density.attrs["max"][d] - h5density.attrs["min"][d] for d in range(dim)]
				dx = np.array([deltax[d]/density.shape[d] for d in range(dim)])
				#print np.sum(density) * np.sum(dx),  np.sum(density_shuffled) * np.sum(dx)
				density /= np.sum(density) * np.sum(dx)
				density_shuffled /= np.sum(density_shuffled) * np.sum(dx)
				#print np.sum(density) * np.sum(dx),  np.sum(density_shuffled) * np.sum(dx)
				
				
				D_kl = np.sum(density[mask] * np.log(density[mask]/density_shuffled[mask])) * np.sum(dx)
				
				#print density
				#quality = subspacefind.maxtree2d_quality(np.array(density) * 1.)
				#dynamics, x, y = subspacefind.maxtree2d_dynamics(density)
				#h5quality.attrs.modify("dynamics-x", x)
				#h5quality.attrs.modify("dynamics-y", y)
				
			if h5file == h5file_output:
				# create a hard link
				#if "density" in h5density: del h5quality["density"]
				#h5density["density"] = h5density
				pass
			else:
				if "density" in h5quality.keys():
					print "remove density"
					del h5quality["density"]
				h5quality["density"] = h5py.ExternalLink(h5filename, "/" + options.name + "/" +name + "/"+ h5density_name)
				
			if "D_kl" in h5quality.attrs.keys(): del h5quality.attrs["D_kl"]
			print D_kl
			h5quality.attrs["D_kl"] = D_kl
		names = h5densities_dim.keys()
		print names
		print h5qualities_dim
		#print h5quality
		quality = [h5qualities_dim[name].attrs["D_kl"] for name in names] # if name in h5quality[name].attrs]
		indices = np.argsort(quality)
		print "ranking"
		for i in indices:
			print "%s\t%.3f" % (names[i], quality[i])
		


