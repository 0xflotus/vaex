#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

from optparse import OptionParser
import h5py
import matplotlib.pyplot as plt
import numpy as np
import scipy.ndimage.filters

parser = OptionParser()

parser.add_option("-n", "--name",
                  help="dataset name [default=%default]", default="densities", type=str)
parser.add_option("-o", "--output",
                  help="output hdf5 file, default the same as input", default=None, type=str)
parser.add_option("-s", "--shuffled", action="store_true", default=False, help="include shuffled density")
parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
parser.add_option("--order", default="012", type=str)
(options, args) = parser.parse_args()

#h5file = h5py.File(args[0], "r", driver="core")
h5filename = os.path.abspath(args[0])
print "opening:", h5filename
h5file = h5py.File(h5filename) #, driver="core")

if options.name not in h5file.keys():
	print options.name, "not found in file", h5filename
	sys.exit(1)

h5densities = h5file[options.name]

#if len(args) == 1:
#	print "following densities available"
#	for dim in ["1d", "2d", "3d"]:
#		if dim in h5densities.keys():
#			print dim, ":\t", "\n\t".join(h5densities[dim].keys())

basename = os.path.splitext(os.path.basename(h5filename))[0]


dim = 3
from vtk import *
i1, i2, i3 = [int(k) for k in options.order]
print i1, i2, i3
if 1:
		name = str(dim) + "d"
		print "dim", dim, name
		#print h5densities.keys()
		#print h5densities
		if name not in h5densities:
			print "group", name, "not found, skipping"
			sys.exit(0)
		h5densities_dim = h5densities[name]
		if not (options.all or len(args) > 1):
			print "possible densities", " ".join(h5densities_dim.keys())
			
			sys.exit(0)
			
		for h5density_name in h5densities_dim.keys():
			if not (options.all or h5density_name in args[1:]):
				continue
			#h5densities_dim = h5densities[name]
			h5density = h5densities_dim[h5density_name]
			if options.shuffled:
				data = np.array(h5density["density-shuffled"])
			else:
				data = np.array(h5density["density"])
			
			Nkde3dx, Nkde3dy, Nkde3dz = data.shape
			#dx = 1
			dx = 2.0
			grid = vtkStructuredPoints()
			grid.SetOrigin(0, 0, 0) # default values
			grid.SetSpacing(dx, dx, dx)
			grid.SetDimensions(Nkde3dx, Nkde3dy, Nkde3dz) # number of points in each direction
			grid.SetNumberOfScalarComponents(1);
			scale = 1./2
			data = scipy.ndimage.filters.gaussian_filter(data, scale, mode="constant", cval=0.)
			I = data
			if 1:
				I = np.log10(data)
				I -= I.max()
				I[I<-6] = -6
			for x in range(Nkde3dx):
				for y in range(Nkde3dy):
					for z in range(Nkde3dz):
						indices = [x,y,z]
						grid.SetScalarComponentFromDouble(x, y, z, 0, I[indices[i1]][indices[i2]][indices[i3]])
			#grid.GetPointData().AddArray(array)
			# print grid.GetPointData().GetNumberOfArrays()
			#array.SetName("unit array")	
			basename = "density-vtk-" + h5density_name
			vtkfilename = basename + ".vtk"
			print "writing vtk file", vtkfilename
			writer = vtkStructuredPointsWriter()
			writer.SetInput(grid)
			writer.SetFileName(vtkfilename)
			#writer.SetFileDimensionality(2)
			#writer.SetFileTypeToASCII()
			writer.Write()
