#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import time
import os

from optparse import OptionParser
import subspacefind
import h5py
import numpy as np
from numpy import *
import itertools
parser = OptionParser()



class HDF5Scope(object):
	def __init__(self, hdf5group):
		self.hdf5group = hdf5group
		self.dict = {}
		
		
	def __getitem__(self,  name):
		if name not in self.dict:
			found = False
			if name in self.hdf5group:
				#print self.hdf5group[name]
				self.dict[name] = np.array(self.hdf5group[name])
		return self.dict[name]
		
			

parser.add_option("-n", "--name",
                  help="dataset name [default=%default]", default="data", type=str)
#parser.add_option("-a", "--all", action="store_true", default=False, help="compute all densities")
#parser.add_option("-l", "--link", action="store_true", default=False, help="link to original datatsets")
parser.add_option("-o", "--output",
                  help="output hdf5 file, default the same as input", default=None, type=str)
(options, args) = parser.parse_args()

h5filename = os.path.abspath(args[0])




print "ok"
print "opening:", h5filename
h5file = h5py.File(h5filename) #, driver="core")
if options.name not in h5file:
	print "doesn't exist", options.name
	sys.exit(1)
data = h5file[options.name]
if options.output is not None:
	h5file_output = h5py.File(options.output)
else:
	h5file_output = h5file
	print "missing output file (-o)"
	sys.exit(1)


scope = HDF5Scope(h5file["data"])
N = len(h5file["data"].values()[0])
scope.dict["index"] = np.arange(N)
#column = args[1]
expr = args[1]

mask = eval(expr, globals(), scope)
#print mask
print "input rows: ", N
print "output rows:", sum(mask)
h5file_output.require_group("data")
for column_name in h5file["data"].keys():
	#print result
	data = np.array(h5file["data"][column_name])[mask]
	#print data.shape
	#print mask.shape
	#print sum(mask)
	if column_name in h5file_output["data"]:
		del h5file_output["data"][column_name]
	h5file_output["data"].create_dataset(column_name, data=data)

